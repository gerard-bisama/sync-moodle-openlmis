// Generated by CoffeeScript 1.8.0
(function() {
  var app, encounters, express, records, server;
  express = require("express");
  var bodyParser = require('body-parser');
  var session = require('express-session');
  var syncAPI =require ("./lib/api");
  const SENDEMAIL = require('./lib/email')
  var moodleStructureAPI =require ("./lib/dataObjectStructure");
  var listUsersToExclude=[];
  listUsersToExclude=syncAPI.getUsernamesToExclude();
  var User=moodleStructureAPI.User;
  var Course=moodleStructureAPI.Course;
  var CourseCategory=moodleStructureAPI.CourseCategory;
 // var dao =require ("./lib/dao");
  //var smsKeyWord=exchangeAPI.getSMSKeyWord();
	function errorHandler(err, req, res, next) {
	  if (res.headersSent) {
		return next(err);
	  }
	  res.status(500);
	  res.render('error', { error: err });
	}
  app = express();
  app.use(session({secret: '2C44774A-D649-4D44-9535-46E296EF984G',name:'sync_demo',resave:true,saveUninitialized:true}));
  app.use(bodyParser.json());
  app.use(bodyParser.urlencoded());
  app.use(errorHandler);
  
  server = app.listen(process.env.PORT || 8084, function() {
    return console.log("SMS2Sparrow exchange is running on port:" + (server.address().port));
  });
	//************************General Function******************************************//
	function sortListLmisUser(listUsers)
	{
		var listSortedUsers=[];
		var maxLength=listUsers.length;
		for(K = 0; K < maxLength; K++)
		{
			for(I = maxLength - 2;I >= 0; I--)
			{
				for(J = 0; J <= I; J++) {
					if(listUsers[J+1].username<listUsers[J].username){
						var t=listUsers[J+1];
						listUsers[J+1]=listUsers[J];
						listUsers[J]=t;
					}
				}
			}
		}
		listSortedUsers=listUsers;
		return listSortedUsers;
	}
	function getProgramFromId(listPrograms,programId)
	{
		var foundProgram=null;
		for(var indexProgram=0;indexProgram<listPrograms.length;indexProgram++ )
		{
			if(listPrograms[indexProgram].id==programId)
			{
				foundProgram=listPrograms[indexProgram];
				break;
			}
		}
		return foundProgram;
	}
	//***********************Function for Moodle WS***********************************//
	function geListOfMoodleUsers(res)
	{
		var listRegisteredUser=[];//users registers manualy or self without verification of valide users
		syncAPI.getListMoodleUSers(function(listUsers)
		{
			if(listUsers!=null)
			{
				//console.log(listUsers);
				if(listUsers.users.length>0)
				{
					var async = require("async");
					var listValidUsers=[];
					for(var indexUsers=0;indexUsers<listUsers.users.length;indexUsers++)
					{
						if(listUsersToExclude.includes(listUsers.users[indexUsers].username))
						{
							continue;
						}
						else
						{
							listValidUsers.push(listUsers.users[indexUsers]);
						}
					}//end for
					//console.log(listValidUsers);
					var userEnroledCourse=[];
					async.each(listValidUsers,function(user,callback)
					{
						
						syncAPI.getListEnrolledCourses(user.id,function (listEnrolledCourses)
						{
							//console.log(user);
							var oEnrolledUser={};
							oEnrolledUser=Object.create(User);
							//Assign moodle user attribute to user object
							oEnrolledUser.id=user.id;
							oEnrolledUser.username=user.username;
							oEnrolledUser.firstname=user.firstname;
							oEnrolledUser.lastname=user.lastname;
							oEnrolledUser.fullname=user.fullname;
							oEnrolledUser.email=user.email;
							oEnrolledUser.department=user.department;
							oEnrolledUser.firstaccess=user.firstaccess;
							oEnrolledUser.lastaccess=user.lastaccess;
							oEnrolledUser.auth=user.auth;
							oEnrolledUser.suspended=user.suspended;
							oEnrolledUser.confirmed=user.confirmed;
							oEnrolledUser.lang=user.lang;
							oEnrolledUser.theme=user.theme;
							oEnrolledUser.timezone=user.timezone;
							oEnrolledUser.mailformat=user.mailformat;
							oEnrolledUser.enrolledCourses=[];
							var listEnrolledCourseNoCategory=[];
							for(var i=0;i<listEnrolledCourses.length;i++)
							{
								var oEnrolledCourse={};
								oEnrolledCourse=Object.create(Course);
								oEnrolledCourse.id=listEnrolledCourses[i].id;
								oEnrolledCourse.shortname=listEnrolledCourses[i].shortname;
								oEnrolledCourse.fullname=listEnrolledCourses[i].fullname;
								oEnrolledCourse.enrolledusercount=listEnrolledCourses[i].enrolledusercount;
								oEnrolledCourse.idnumber=listEnrolledCourses[i].idnumber;
								oEnrolledCourse.visible=listEnrolledCourses[i].visible;
								oEnrolledCourse.format=listEnrolledCourses[i].format;
								oEnrolledCourse.showgrades=listEnrolledCourses[i].showgrades;
								oEnrolledCourse.lang=listEnrolledCourses[i].lang;
								oEnrolledCourse.enablecompletion=listEnrolledCourses[i].enablecompletion;
								oEnrolledCourse.category=listEnrolledCourses[i].category;
								oEnrolledCourse.progress=listEnrolledCourses[i].progress;
								oEnrolledCourse.startdate=listEnrolledCourses[i].startdate;
								oEnrolledCourse.enddate=listEnrolledCourses[i].enddate;
								listEnrolledCourseNoCategory.push(oEnrolledCourse);
								//oEnrolledUser.enrolledCourses.push(oEnrolledCourse);
								
							}
							//Now get course categories for the user course list
							
							
							userEnroledCourse.push(oEnrolledUser);
							callback();
						});
					},function(err)
					{
						console.log("--------------Do something here section---------------")
						console.log(JSON.stringify(userEnroledCourse));
					}
					);
					
					//console.log(listUsers);
					/*
					for(var indexUsers=0;indexUsers<listUsers.users.length;indexUsers++)
					{
						if(listUsersToExclude.includes(listUsers.users[indexUsers].username))
						{
							continue;
						}
						else
						{
							console.log("#######"+listUsers.users[indexUsers].username+"#######");
							syncAPI.getListEnrolledCourses(listUsers.users[indexUsers].id,function (listEnrolledCourses)
							{
								if(listEnrolledCourses!=null)
								{
									if(listEnrolledCourses.length>0)
									{
										console.log(listEnrolledCourses);
										console.log("-------------------");
									}
								}
							});
							//listRegisteredUser.push(listUsers.users[indexUsers]);
						}
					}*/
					//end for
					//console.log(listRegisteredUser);
				}
			}
			return res.end();
		});
	}
	function getListMoodleCoursesAndUsers(callback)
	{
		//console.log("Entered!!!")
		var listOfCourses=[];
		var listCourseWithCategories=[];
		//Get All coures in moodle
		syncAPI.getListCourses(function(listCourses)
		{
			//console.log(listCourses);
			if(listCourses!=null)
			{
				if(listCourses.length>0)
				{
					var async = require("async");
					var listTopicsCourses=[];
					//Remove the site object, not really courses topics
					for(var indexCourses=0;indexCourses<listCourses.length;indexCourses++)
					{
						if(listCourses[indexCourses].format=="topics")
						{
							//listTopicsCourses.push(listCourses[indexCourses]);
							var tempCourseCustomized=transformToCourseCustomizedObject(listCourses[indexCourses]);
							listTopicsCourses.push(tempCourseCustomized);
						}
						else
						{
							continue;
						}
					}//end for
					//console.log(listTopicsCourses);
					if(listTopicsCourses.length==0)
					{
						console.log("-----No courses available in this moodle instance. Only users enrolled in the courses could be processed!");
						callback();
						//res.end();
					}
					else
					{
						var async = require("async");
						//var listCourseWithCategories=[];
						//Add categories informations to the course
						async.each(listTopicsCourses,function(topicCourse,callback)
						{
							//console.log(topicCourse);
							syncAPI.getCourseCategory(topicCourse.categoryid,function(courseCategory)
							{
								//console.log(courseCategory);
								//console.log("----------------");
								if(courseCategory!=null)
								{
									//console.log(courseCategory);
									var oTopicCourse=topicCourse;
									//oTopicCourse.category=cour
									var tempCategoryCustomized=transformToCategoryCustomizedObject(courseCategory[0]);//Coursecategory returns always a table of 1 object
									oTopicCourse.category=tempCategoryCustomized;
									//console.log(tempCategoryCustomized);
									listCourseWithCategories.push(oTopicCourse);
								
								}
								callback();
							}
							);
							
						},function(err)
							{
								console.log("--------------Returned ListCourses with categories---------------")
								//console.log(JSON.stringify(listCourseWithCategories));
								//now getusers and assing them the course they are enrolled to
								//@param:listCourseWithCategories is passed only to keep the variable in the context of async call to avoid loosing it
								var listRegisteredUser=[];//users registers manualy or self without verification of valide users
								//getthe list of Synched users
								var listAlreadySynchedUsers=[];
								syncAPI.getAllSynchedUsers(function(listSynchedUsers)
								{
									listAlreadySynchedUsers=listSynchedUsers;
									syncAPI.getListMoodleUSersWithPropagatedCustomizedCourseWithCat(listCourseWithCategories,function(listUsersWithPropagatedVar)
									{
										
										var ListOfCustomizedCoursesObjectsWithCategories=listUsersWithPropagatedVar[0]; //Get propagatedvar
										//console.log(ListOfCustomizedCoursesObjectsWithCategories);
										var listUsers=[];
										listUsers=listUsersWithPropagatedVar[1];
										console.log("Returned List of Moodle users");
										var maxUsersToSyncPerCall=syncAPI.getMaxUsersToSyncPerCall();
										if(listUsers!=null)
										{
											//console.log(listUsers);
											if(listUsers.users.length>0)
											{
												var listValidUsers=[];
												for(var indexUsers=0;indexUsers<listUsers.users.length;indexUsers++)
												{
													if(listUsersToExclude.includes(listUsers.users[indexUsers].username))
													{
														continue;
													}
													else
													{
														var found=checkUserIdInSynchedList(listUsers.users[indexUsers].id,listAlreadySynchedUsers);
														if(found)
														{
															continue;
														}
														//var tempUserCustomized=transformToUserCustomizedObject(listUsers.users[indexUsers]);
														if(listValidUsers.length < maxUsersToSyncPerCall)
														{
															var tempUserCustomized=transformToUserCustomizedObject(listUsers.users[indexUsers]);
															listValidUsers.push(tempUserCustomized);
														}
														
													}
												}//end of for
												//console.log(listValidUsers);
												if(listValidUsers.length == 0)
												{
													console.log("-----There is not any users enrolled on a course in this moodle instance!-----");
													callback();
												}
												else
												{
													var asyncUser = require("async");
													var listCourseWithCategories=[];
													var listUsersWithAssociatedCourses=[];
													//Add categories informations to the course
													var compteur=0;
													asyncUser.each(listValidUsers,function(validUser,callback)
													{
														//console.log(compteur+"/"+listValidUsers.length);
														console.log("get enrolled courses for user "+validUser.id);
														syncAPI.getListEnrolledCourses(validUser.id,function(listEnrolledCourses)
														{
															//console.log(listEnrolledCourses);
															if(listEnrolledCourses!=null)
															{
																
																if(listEnrolledCourses.length>0)
																{
																	//console.log(listEnrolledCourses);
																	var listIdsEnrolledCourses=[];
																	for(var i=0;i<listEnrolledCourses.length;i++)
																	{
																		listIdsEnrolledCourses.push(listEnrolledCourses[i].id);
																	}
																	//console.log(ListOfCustomizedCoursesObjectsWithCategories);
																	var listUserEnrolledCourses=getListCustomizedCourseObjetFromIds(listIdsEnrolledCourses,ListOfCustomizedCoursesObjectsWithCategories);
																	var tempUser=validUser;
																	tempUser.enrolledCourses=listUserEnrolledCourses;
																	listUsersWithAssociatedCourses.push(tempUser);
																	//console.log("----Fech enrolled courses----");
																	//console.log(JSON.stringify( tempUser));
																}
															}
															//compteur++;
															callback();
															
														});
														//callback();
														compteur++;
													},function(err)
													{
														console.log("--------------Returns the  section List users and associated courses---------------");
														//console.log(JSON.stringify(listUsersWithAssociatedCourses));
														//return;
														//res.send(listUsersWithAssociatedCourses);
														//Remove users without enrolled courses
														var cleanedListUsersWithAssociatedCourses=[];
														for(var indexUser=0;indexUser<listUsersWithAssociatedCourses.length;indexUser++)
														{
															if(listUsersWithAssociatedCourses[indexUser].enrolledCourses.length>0)
															{
																cleanedListUsersWithAssociatedCourses.push(listUsersWithAssociatedCourses[indexUser]);
															}
														}
														return callback(cleanedListUsersWithAssociatedCourses);
													}//end  of function(err) asyncUser
													);
												}
												
												
											}//End if users.length
										}//end if listUsers!=null
									});
								
								});
								
								
							}//End of function(err) async
						);//End async
					}//fin else listTopicCourses.length
					
					
				}//end if listcourse lenghth 
			}//end if listcourse null
			else
			{
				console.log("-----No courses available in this moodle instance. Only user enrolled in the course could be processed!");
				callback();
			}
			//return res.end();
		});//End API getListCoures
	}
	function checkUserIdInSynchedList(userId,synchedUserLists)
	{
		var found=false;
		for(var index=0;index<synchedUserLists.length;index++)
		{
			if(synchedUserLists[index].id==""+userId)
			{
				found=true;
				break;
			}
		}
		return found;
	}
	function transformToCourseCustomizedObject(moodleRawCourse)
	{
		var oCourse={};
		oCourse=Object.create(Course);
		oCourse.id=moodleRawCourse.id;
		oCourse.categoryid=moodleRawCourse.categoryid;
		oCourse.shortname=moodleRawCourse.shortname;
		oCourse.fullname=moodleRawCourse.fullname;
		//oCourse.enrolledusercount=lmoodleRawCourse.enrolledusercount;
		oCourse.idnumber=moodleRawCourse.idnumber;
		oCourse.visible=moodleRawCourse.visible;
		oCourse.format=moodleRawCourse.format;
		oCourse.showgrades=moodleRawCourse.showgrades;
		oCourse.lang=moodleRawCourse.lang;
		oCourse.enablecompletion=moodleRawCourse.enablecompletion;
		oCourse.category=moodleRawCourse.categoryid;
		//oCourse.progress=moodleRawCourse.progress;
		oCourse.startdate=moodleRawCourse.startdate;
		oCourse.enddate=moodleRawCourse.enddate;
		oCourse.category="";
		return oCourse;
	}
	function transformToCategoryCustomizedObject(moodleRawCategory)
	{
		//console.log()
		var oCategory={};
		oCategory=Object.create(CourseCategory);
		oCategory.id=moodleRawCategory.id;
		oCategory.name=moodleRawCategory.name;
		oCategory.idnumber=moodleRawCategory.idnumber;
		oCategory.description=moodleRawCategory.description;
		oCategory.descriptionformat=moodleRawCategory.descriptionformat;
		oCategory.parent=moodleRawCategory.parent;
		oCategory.sortorder=moodleRawCategory.sortorder;
		oCategory.coursecount=moodleRawCategory.coursecount;
		oCategory.visible=moodleRawCategory.visible;
		oCategory.visibleold=moodleRawCategory.visibleold;
		oCategory.timemodified=moodleRawCategory.timemodified;
		oCategory.depth=moodleRawCategory.depth;
		oCategory.path=moodleRawCategory.path;
		oCategory.theme=moodleRawCategory.theme;
		//console.log(moodleRawCategory);
		return oCategory;
		
	}
	function transformToUserCustomizedObject(moodleRawUser)
	{
		var oUser={};
		oUser=Object.create(User);
		//Assign moodle user attribute to user object
		oUser.id=moodleRawUser.id;
		oUser.username=moodleRawUser.username;
		oUser.firstname=moodleRawUser.firstname;
		oUser.lastname=moodleRawUser.lastname;
		oUser.fullname=moodleRawUser.fullname;
		oUser.email=moodleRawUser.email;
		oUser.department=moodleRawUser.department;
		oUser.firstaccess=moodleRawUser.firstaccess;
		oUser.lastaccess=moodleRawUser.lastaccess;
		oUser.auth=moodleRawUser.auth;
		oUser.suspended=moodleRawUser.suspended;
		oUser.confirmed=moodleRawUser.confirmed;
		oUser.lang=moodleRawUser.lang;
		oUser.theme=moodleRawUser.theme;
		oUser.timezone=moodleRawUser.timezone;
		oUser.mailformat=moodleRawUser.mailformat;
		if(moodleRawUser.customfields!=null)
		{
			oUser.customfields=moodleRawUser.customfields;
		}
		
		oUser.enrolledCourses=[];
		return oUser;
	}
	function getListCustomizedCourseObjetFromIds(arryIdsEnrolledCourses,listCustomizedCourseObjets)
	{
		var listItemsFound=[];
		for(var indexListCourses=0;indexListCourses< listCustomizedCourseObjets.length;indexListCourses++)
		{
			if(arryIdsEnrolledCourses.includes(listCustomizedCourseObjets[indexListCourses].id))
			{
				listItemsFound.push(listCustomizedCourseObjets[indexListCourses]);
			}
		}
		return listItemsFound;
	}
	function getListRolesFromMoodleUser(userId,listUsers)
	{
		var listCourseCategoryId=[];
		for(var indexUser=0;indexUser<listUsers.length;indexUser++)
		{
			if(listUsers[indexUser].id==userId)
			{
				for(var indexCourse=0;indexCourse<listUsers[indexUser].enrolledCourses.length;indexCourse++)
				{
					if(listUsers[indexUser].enrolledCourses[indexCourse].category.idnumber!=null)
					{
						listCourseCategoryId.push(listUsers[indexUser].enrolledCourses[indexCourse].category.idnumber.trim().toLowerCase());
					}
					else
					{
						continue;
					}
					
				}
				break;
			}
		}
		return listCourseCategoryId;
	}
	//***********************Function for OpenLMIS***********************************//
	function sortListFacilityByName(listFacilities)
	{
		var listSortedFacilities=[];
		var maxLength=listFacilities.length;
		for(K = 0; K < maxLength; K++)
		{
			for(I = maxLength - 2;I >= 0; I--)
			{
				for(J = 0; J <= I; J++) {
					if(listFacilities[J+1].name<listFacilities[J].name){
						var t=listFacilities[J+1];
						listFacilities[J+1]=listFacilities[J];
						listFacilities[J]=t;
					}
				}
			}
		}
		listSortedFacilities=listFacilities;
		return listSortedFacilities;
	}
	function sortListFacilityByNbrUserAndName(listFacilities)
	{
		var listSortedFacilities=[];
		var maxLength=listFacilities.length;
		for(K = 0; K < maxLength; K++)
		{
			for(I = maxLength - 2;I >= 0; I--)
			{
				for(J = 0; J <= I; J++) {
					if(listFacilities[J+1].users.length<listFacilities[J].users.length && listFacilities[J+1].name<listFacilities[J].name ){
						var t=listFacilities[J+1];
						listFacilities[J+1]=listFacilities[J];
						listFacilities[J]=t;
					}
				}
			}
		}
		listSortedFacilities=listFacilities;
		return listSortedFacilities;
	}
	function sortListUsersById(listMoodleUsers)
	{
		var listSortedUsers=[];
		var maxLength=listMoodleUsers.length;
		for(K = 0; K < maxLength; K++)
		{
			for(I = maxLength - 2;I >= 0; I--)
			{
				for(J = 0; J <= I; J++) {
					if(listMoodleUsers[J+1].id<listMoodleUsers[J].id){
						var t=listMoodleUsers[J+1];
						listMoodleUsers[J+1]=listMoodleUsers[J];
						listMoodleUsers[J]=t;
					}
				}
			}
		}
		listSortedUsers=listMoodleUsers;
		return listSortedUsers;
	}
	function getRoleByName(roleName,listRoles)
	{
		var roleFound=null;
		for(var indexRole=0;indexRole<listRoles.length;indexRole++)
		{
			/*
			console.log(listRoles[indexRole].name.trim().toLowerCase()+"=="+roleName.trim().toLowerCase());
			console.log(""+listRoles[indexRole].name.trim().toLowerCase()==""+roleName.trim().toLowerCase());
			console.log("-------------------------------------------------------");
			* */
			if(listRoles[indexRole].name.trim().toLowerCase()==roleName.trim().toLowerCase())
			{
				roleFound=listRoles[indexRole];
				break;
			}
		}
		return roleFound;
	}
	function getProgramByName(programName,listPrograms)
	{
		var programFound=null;
		for(var indexProgram=0;indexProgram<listPrograms.length;indexProgram++)
		{
			if(listPrograms[indexProgram].name.trim().toLowerCase()==programName.trim().toLowerCase())
			{
				programFound=listPrograms[indexProgram];
				break;
			}
		}
		return programFound;
	}
	function getListLMISFacilitiesAndAssociatedUsers(callback)
	{
		syncAPI.getAccessToken(function(responseToken)
		{
			//console.log(responseToken.access_token);
			var token=responseToken.access_token;
			//req.session.token=token;
			//console.log("------"+req.session.token+"-------------");
			syncAPI.getListFacility(token,function(listFacilities)
			{
				var _listFacilities=listFacilities;
				syncAPI.getListPrograms(token,function(listPrograms)
				{
					var _listPrograms=listPrograms;
					var _listUserRole=[];
					syncAPI.getListUsers(token,function(listUsers)
					{
						//var _listUsers=listUsers.slice(0,100);
						var _listUsers=listUsers.slice(0,10);
						if(_listUsers.length>0)
						{
							
							//Now get user role assigned informations
							
							//console.log(_listUsers[1]);
							for(var indexUser=0;indexUser<_listUsers.length;indexUser++)
							{
								
								//console.log(indexUser+"/"+_listUsers.length);
								//console.log("home facility : "+_listUsers[indexUser].homeFacilityId);
								syncAPI.getAssignedRoleSync(_listUsers[indexUser].id,token,function(listRoles)
								{
									var _listRoles=listRoles;
									
									//console.log(listRoles)
									//Add program informations to role
									for(var indexRole=0;indexRole<_listRoles.length;indexRole++)
									{
										if(_listRoles[indexRole].programId==undefined || _listRoles[indexRole].programId=="" )
										{
											continue;
										}
										else
										{
											var tempProgram=getProgramFromId(_listPrograms,_listRoles[indexRole].programId);
											_listRoles[indexRole].programName=(getProgramFromId(_listPrograms,_listRoles[indexRole].programId)).name;
											
										}//_listRoles[indexRole].programName=(getProgramFromId(_listPrograms,_listRoles[indexRole].programId)).name;
									}
									_listUsers[indexUser].roles=listRoles;
								});
							}
							//console.log(_listUsers.length);
							//now add user to the facility
							for(var indexFacility=0;indexFacility<_listFacilities.length;indexFacility++)
							{
								//for each facilities, find user that have if as home facility
								//console.log(_listFacilities[indexFacility].id);
								for(var indexUser=0;indexUser<_listUsers.length;indexUser++)
								{
									if(_listUsers[indexUser].homeFacilityId==_listFacilities[indexFacility].id)
									{
										//console.log("Match...");
										_listFacilities[indexFacility].users.push(_listUsers[indexUser]);
									}
									else
									{
										continue;
									}
								}
							}
							
							//console.log(JSON.stringify(_listUsers[1]));
							//console.log("--------------------------------------");
							console.log("returns list of eSIGL facilities and associated users");
							return callback(_listFacilities);
							//return res.send(_listFacilities);
						}//end if _listUsers
						else
						{
							//return only the list of facility
						}//end else _listUsers
					});//End getListUsers
					
					//return res.end();
				});//End getListPrograms
			});//End getFacilities
		});//end getAccessToken
	
	}
	function getListLMISFacilitiesAndAssociatedUsers2(callback)
	{
		syncAPI.getAccessToken(function(responseToken)
		{
			//console.log(responseToken.access_token);
			var token=responseToken.access_token;
			//req.session.token=token;
			//console.log("------"+req.session.token+"-------------");
			syncAPI.getListFacility(token,function(listFacilities)
			{
				var _listFacilities=listFacilities;
				syncAPI.getListUsers(token,function(listUsers)
				{
					var _listUsers=listUsers;
					if(_listUsers.length>0)
					{
						for(var indexFacility=0;indexFacility<_listFacilities.length;indexFacility++)
						{
							//for each facilities, find user that have if as home facility
							for(var indexUser=0;indexUser<_listUsers.length;indexUser++)
							{
								if(_listUsers[indexUser].homeFacilityId==_listFacilities[indexFacility].id)
								{
									//console.log("Match...");
									_listFacilities[indexFacility].users.push(_listUsers[indexUser]);
								}
								else
								{
									continue;
								}
							}
						}
						console.log("End of the process....");
						return callback(_listFacilities);
						
					}
					else
					{
						console.log("End of the process....");
						return callback(_listFacilities);
					}
				});//end get listUsers
			});//End getFacilities
		});//end getAccessToken
	
	}
	function getListLMISFacilitiesAndAssociatedUsersV2(callback)
	{
		
		syncAPI.getListFacilityV2(function(listFacilities)
		{
			var _listFacilities=listFacilities;
			syncAPI.getListUsersOpenLMISV2(function(listUsers)
			{
				var _listUsers=listUsers;
				if(_listUsers.length>0)
				{
					for(var indexFacility=0;indexFacility<_listFacilities.length;indexFacility++)
					{
						//for each facilities, find user that have if as home facility
						for(var indexUser=0;indexUser<_listUsers.length;indexUser++)
						{
							if(_listUsers[indexUser].homeFacilityId==_listFacilities[indexFacility].id)
							{
								//console.log("Match...");
								_listFacilities[indexFacility].users.push(_listUsers[indexUser]);
							}
							else
							{
								continue;
							}
						}
					}
					console.log("Returns eSIGL facilities and associated users");
					return callback(_listFacilities);
					
				}
				else
				{
					console.log("Returns eSIGL facilities and associated users");
					return callback(_listFacilities);
				}
			});//end get listUsers
		});//End getFacilities
	
	}
	function getLMISRolesV2(callback)
	{
		syncAPI.getListRolesLMISV2(function(listRoles)
		{
			return callback(listRoles);
		});
	}
	function getLmisUsersFromFacility(facilityId,listLmisFacilities)
	{
		var usersFound=[];
		for(var indexFacility=0;indexFacility<listLmisFacilities.length;indexFacility++)
		{
			if(listLmisFacilities[indexFacility].id==facilityId)
			{
				usersFound=listLmisFacilities[indexFacility].users;
				break;
			}
			else
			{
				continue;
			}
		}
		return usersFound;
	}
	function getLmisUsersWithUsername(username,listLmisUsers)
	{
		var userFound=null;
		for(var indexUser=0;indexUser<listLmisUsers.length;indexUser++)
		{
			if(listLmisUsers[indexUser].username==username)
			{
				userFound=listLmisUsers[indexUser];
				break;
			}
			else
			{
				continue;
			}
		}
		return userFound;
	}
	function getListRoles(callback)
	{
		syncAPI.getAccessToken(function(responseToken)
		{
			//console.log(responseToken.access_token);
			var token=responseToken.access_token;
			syncAPI.getListRoles(token,function(listRoles)
			{
				if(listRoles!=null)
				{
					return callback(listRoles);
				}
			});
		});
	}
	function getListPrograms(callback)
	{
		syncAPI.getAccessToken(function(responseToken)
		{
			//console.log(responseToken.access_token);
			var token=responseToken.access_token;
			syncAPI.getListPrograms(token,function(listPrograms)
			{
				if(listPrograms!=null)
				{
					return callback(listPrograms);
				}
			});
		});
	}
	//******************************App routes********************************************//
	app.get ("/getmoodleuser", function (req,res,next)
	{
		//console.log(req.session);
		//geListOfMoodleUsers(res)
		var async = require("async");
		var _listUserAndAssociatedCourse=[];
		//used [1],fanciful array since async require the first param to loop through
		async.each([1],function(oUser,callback)
		{
			getListMoodleCoursesAndUsers(function(listUserAndAssociatedCourse)
			{
				_listUserAndAssociatedCourse=listUserAndAssociatedCourse;
				callback();
			});
			
		},function(error)
		{
			console.log("Finish Building list User and role....");
			if(_listUserAndAssociatedCourse!=undefined)
			{
				console.log(_listUserAndAssociatedCourse);
				return res.send(_listUserAndAssociatedCourse);
			}
			else
			{
				return res.send([]);
			}
			
		});
		//res.send(res);
		
	});
	app.get ("/getfacilitiesandusers", function (req,res,next)
	{
		var async = require("async");
		var _listFacilitiesAndAssociatedUsers=[];
		//used [1],fanciful array since async require the first param to loop through
		async.each([1],function(oUser,callback)
		{
			getListLMISFacilitiesAndAssociatedUsers(function(listFacilitiesAndAssociatedUsers)
			{
				_listFacilitiesAndAssociatedUsers=listFacilitiesAndAssociatedUsers;
				callback();
			});
			
		},function(error)
		{
			console.log("Finish Building list LMIS facilities and associated users....");
			//console.log(_listUserAndAssociatedCourse);
			return res.send(_listFacilitiesAndAssociatedUsers);
		});
	});
	app.get ("/getfacilitiesandusersOpenLMISV2", function (req,res,next)
	{
		var async = require("async");
		var _listFacilitiesAndAssociatedUsers=[];
		//used [1],fanciful array since async require the first param to loop through
		async.each([1],function(oUser,callback)
		{
			getListLMISFacilitiesAndAssociatedUsersV2(function(listFacilitiesAndAssociatedUsers)
			{
				_listFacilitiesAndAssociatedUsers=listFacilitiesAndAssociatedUsers;
				callback();
			});
			
		},function(error)
		{
			console.log("Finish Building list LMIS facilities and associated users....");
			//console.log(_listUserAndAssociatedCourse);
			return res.send(_listFacilitiesAndAssociatedUsers);
		});
	});
	app.get ("/getfacilitiesv2", function (req,res,next)
	{
		//console.log("Enter v2");
		syncAPI.getListFacilityV2(function(listFacilities)
		{
			//console.log(listFacilities);
			return res.send(listFacilities);
		});
	});
	app.get ("/getlmisv2users", function (req,res,next)
	{
		//console.log("Enter v2");
		syncAPI.getListUsersOpenLMISV2(function(listUsers)
		{
			//console.log(listFacilities);
			return res.send(listUsers);
		});
	});
	app.get ("/lanchsyncv2", function (req,res,next)
	{
		var async = require("async");
		var _listUserAndAssociatedCourse=[];
		var _listFacilitiesAndAssociatedUsers=[];
		var _listRoles=[];
		async.each([1,2,3],function(index,callback)
		{
			if(index==1)
			{
				//console.log("Entered "+index);
				getListMoodleCoursesAndUsers(function(listUserAndAssociatedCourse)
				{
					_listUserAndAssociatedCourse=listUserAndAssociatedCourse;
					callback();
				});
			}
			if(index==2)
			{
				getListLMISFacilitiesAndAssociatedUsersV2(function(listFacilitiesAndAssociatedUsers)
				{
					_listFacilitiesAndAssociatedUsers=listFacilitiesAndAssociatedUsers;
					callback();
				});
			}
			if(index==3)
			{
				getLMISRolesV2(function(listRoles)
				{
					_listRoles=listRoles;
					callback();
				});
			}
		},function(error)
		{
			console.log("Finish Building list User and role....");
			//console.log(_listUserAndAssociatedCourse.length);
			if(_listUserAndAssociatedCourse.length>0)
			{
				//console.log(_listFacilitiesAndAssociatedUsers);
				//return;
				var listUsersToCreateInLmis=[];
				for(var indexUser=0;indexUser<_listUserAndAssociatedCourse.length;indexUser++)
				{
					var usernameToFind=_listUserAndAssociatedCourse[indexUser].username;
					var userIsAlreadyInLmis=false;
					var userFound=null;
					//for each facility check if the user  
					for(var indexFacility=0;indexFacility<_listFacilitiesAndAssociatedUsers.length; indexFacility++)
					{
						var listUsersInFacility=[];
						if(_listFacilitiesAndAssociatedUsers[indexFacility].users.length>0)
						{
							listUsersInFacility=getLmisUsersFromFacility(_listFacilitiesAndAssociatedUsers[indexFacility].id,_listFacilitiesAndAssociatedUsers);
							userFound=getLmisUsersWithUsername(usernameToFind,listUsersInFacility);
							if(userFound!=null)//if user already created in openlmis,stop all process and pass to the next user
							{
								//continue;
								userIsAlreadyInLmis=true;
								break;
							}
						}
						else
						{
							continue;
						}
					}//end for _listFacilitiesAndAssociatedCourse
					if(userIsAlreadyInLmis)
					{
						continue; //continue to the next user.This user could be created
					}
					else//this user shoud be created in openlmis
					{
						listUsersToCreateInLmis.push(_listUserAndAssociatedCourse[indexUser]);
					}
					
				}//End for _listUserAndAssociatedCourse
				//console.log(listUsersToCreateInLmis);
				var nbrOfUserToAddInLMIS=listUsersToCreateInLmis.length;
				if(nbrOfUserToAddInLMIS>0)
				{
					//limit the number of user to create to 20 every calls to avoid max_connection limit fixed to 100
					var maxUsersToSyncPerCall=syncAPI.getMaxUsersToSyncPerCall();
					var sortedListUsersToCreateInLMIS=sortListUsersById(listUsersToCreateInLmis);
					//var finalListUserToCreateInLMIS=sortedListUsersToCreateInLMIS.slice(0,maxUsersToSyncPerCall);
					var finalListUserToCreateInLMIS=sortedListUsersToCreateInLMIS;
					//console.log(finalListUserToCreateInLMIS);
					//return;
					var listLmisUserToCreate=[];
					//Get the sorted list of first 100 facilities,limit 100 due to the max_connection params configured in postgres openlmis
					var listSortedFacility=sortListFacilityByNbrUserAndName(_listFacilitiesAndAssociatedUsers.slice(0,100));
					var listSortedFacilityToAdd=listSortedFacility.slice(0,maxUsersToSyncPerCall);
					//console.log(listSortedFacilityToAdd);
					//return;
					for(var indexUser=0;indexUser<finalListUserToCreateInLMIS.length;indexUser++)
					{
						//Generate random index for listHomeFacility
						var indexHomeFacilities=Math.floor(Math.random() * listSortedFacilityToAdd.length);
						var homeFacilityId=listSortedFacility[indexHomeFacilities].id;
						var listRoleAssigned=[];
						//list roles and associated programs defined by default in manifest file
						var listRoleAndProgramsRules=syncAPI.getlmisUserRolesAndProgramRules();
						//the role is returned as course categoryid
						//var listRoleFromMoodleUser=getListRolesFromMoodleUser(finalListUserToCreateInLMIS[indexUser].id,finalListUserToCreateInLMIS);
						//console.log(listRoleFromMoodleUser);
						//console.log("-----------------------");
						for(var indexRule=0;indexRule<listRoleAndProgramsRules.length;indexRule++)
						{
							var oRoleProgramRule=listRoleAndProgramsRules[indexRule];
							var oRole=getRoleByName(oRoleProgramRule.role,_listRoles);
							var oRoleToAssign={roleId:oRole.id,programId:oRoleProgramRule.program_wharehouse};
							listRoleAssigned.push(oRoleToAssign);
							
						}//end for listRoleAndProgramsRules
						if(finalListUserToCreateInLMIS[indexUser].username!="")
						{
							var passwordPart2=Math.floor(Math.random() * 10000)+9000;
							var _password="Moodle!"+passwordPart2;
							var lmisUser={username:finalListUserToCreateInLMIS[indexUser].username,password:_password,firstName:finalListUserToCreateInLMIS[indexUser].firstname,
							lastName:finalListUserToCreateInLMIS[indexUser].lastname,email:finalListUserToCreateInLMIS[indexUser].email,active:true,loginRestricted:false,
							homeFacilityId:homeFacilityId,
							roleAssignments:listRoleAssigned};
							listLmisUserToCreate.push(lmisUser);
						}
					}//end for listUsersToCreateInLmis
					//console.log(JSON.stringify(listLmisUserToCreate));
					console.log(listLmisUserToCreate);
					//return ;
					var async = require("async");
					var listResultUsersCreated=[];
					async.each(listLmisUserToCreate,function(userToCreate,callback)
					{
						/*
						syncAPI.createLMISUserLMISV2Sync(userToCreate,function(res)
						{
							if(res)
							{
								console.log(userToCreate.username+" created in eSIGL");
								listResultUsersCreated.push(userToCreate);
							}
							else
							{
								console.log("Error:"+userToCreate.username+" not created in eSIGL!!");
							}
							callback();
						});*/
						listResultUsersCreated.push(userToCreate);
						callback();
					},function(err)
					{
						if(err)
						{
							console.log("Error Create user"+err);
						}
						console.log("Create LMIS users done!!!");
						var emailSettings=syncAPI.getEmailSettings();
						//return;
						//now send email to the openLMIS user
						var esigleSite=syncAPI.getOpenLMISV2Url();
						var emailTitle=syncAPI.getEmailStructure().title;
						
						//var username=
						var async = require("async");
						async.each(listResultUsersCreated,function(resultUser,callback)
						{
							//var email=resultUser.email;
							var email="gerbis2000@gmail.com";
							var username=resultUser.username;
							var password=resultUser.password;
							var messageContent=syncAPI.getEmailStructure().messageContent;
							messageContent= messageContent.replace("{esigleSite}",esigleSite);
							messageContent=messageContent.replace("{username}",username);
							messageContent=messageContent.replace("{password}",password);
							var destination=["gerbis2000@gmail.com"];
							SENDEMAIL.sendEmail(emailTitle,messageContent,destination,emailSettings,()=>{
								console.log("Email sent!");
							})
							//console.log(messageContent);
							callback();
						},function(err)
						{
							if(err)
							{
								console.log("Error: "+err);
							}
							return;
							
						});
						
						
						
					});//end async listLmisUserToCreate
				}//end if nbrOfUserToAddInLMIS>0
			}
		} //end of  function(error)
		);//end of async.each([1,2]..
		
	});
	app.get ("/lanchsync", function (req,res,next)
	{
		var async = require("async");
		var _listUserAndAssociatedCourse=[];
		var _listFacilitiesAndAssociatedUsers=[];
		var _listFacilitiesAndAssociatedUsers=[];
		var _listRoles=[];
		var _listPrograms=[];
		async.each([1,2,3,4],function(index,callback)
		{
			if(index==1)
			{
				console.log("Entered "+index);
				getListMoodleCoursesAndUsers(function(listUserAndAssociatedCourse)
				{
					_listUserAndAssociatedCourse=listUserAndAssociatedCourse;
					callback();
				});
			}
			if(index==2)
			{
				getListLMISFacilitiesAndAssociatedUsers2(function(listFacilitiesAndAssociatedUsers)
				{
					_listFacilitiesAndAssociatedUsers=listFacilitiesAndAssociatedUsers;
					callback();
				});
			}
			if(index==3)
			{
				getListRoles(function(listRoles)
				{
					_listRoles=listRoles;
					callback();
				});
			}
			if(index==4)
			{
				getListPrograms(function(listPrograms)
				{
					_listPrograms=listPrograms;
					callback();
				});
			}
			
		},function(error)
		{
			console.log("Finish Building list User and role....");
			if(_listUserAndAssociatedCourse.length>0)
			{
			//console.log(_listUserAndAssociatedCourse);
			//console.log("-----------------------------------------------");
			//console.log(_listFacilitiesAndAssociatedUsers[0]);
			//console.log(_listPrograms);
			//Loop through moodle users to check if user is already in openlmis
			//var listSortedFacility=sortListFacilityByNbrUserAndName(_listFacilitiesAndAssociatedUsers);
				var listUsersToCreateInLmis=[];
				for(var indexUser=0;indexUser<_listUserAndAssociatedCourse.length;indexUser++)
				{
					var usernameToFind=_listUserAndAssociatedCourse[indexUser].username;
					var userIsAlreadyInLmis=false;
					var userFound=null;
					//for each facility check if the user  
					for(var indexFacility=0;indexFacility<_listFacilitiesAndAssociatedUsers.length; indexFacility++)
					{
						var listUsersInFacility=[];
						if(_listFacilitiesAndAssociatedUsers[indexFacility].users.length>0)
						{
							listUsersInFacility=getLmisUsersFromFacility(_listFacilitiesAndAssociatedUsers[indexFacility].id,_listFacilitiesAndAssociatedUsers);
							userFound=getLmisUsersWithUsername(usernameToFind,listUsersInFacility);
							if(userFound!=null)//if user already created in openlmis,stop all process and pass to the next user
							{
								//continue;
								userIsAlreadyInLmis=true;
								break;
							}
						}
						else
						{
							continue;
						}
					}//end for _listFacilitiesAndAssociatedCourse
					if(userIsAlreadyInLmis)
					{
						continue; //continue to the next user.This user could be created
					}
					else//this user shoud be created in openlmis
					{
						listUsersToCreateInLmis.push(_listUserAndAssociatedCourse[indexUser]);
					}
					
				}//End for _listUserAndAssociatedCourse
				//console.log(listUsersToCreateInLmis.length);
				//Now get the sorted Facility by nbr of user and by name
				var nbrOfUserToAddInLMIS=listUsersToCreateInLmis.length;
				//console.log(oRoleProgramRule);
				//console.log(getRoleByName(oRoleProgramRule.role,_listRoles));
				
				if(nbrOfUserToAddInLMIS>0)
				{
					var listLmisUserToCreate=[];
					//get the first #nbrOfUserToAddInLMIS to add users
					//var listSortedFacility=sortListFacilityByNbrUserAndName(_listFacilitiesAndAssociatedUsers);
					var listSortedFacility=sortListFacilityByNbrUserAndName(_listFacilitiesAndAssociatedUsers.slice(0,100));
					//console.log(listSortedFacility.slice(0,4));
					var listSortedFacilityToAdd=listSortedFacility.slice(0,nbrOfUserToAddInLMIS);
					for(var indexUser=0;indexUser<listUsersToCreateInLmis.length;indexUser++)
					{
						var homeFacilityId=listSortedFacility[indexUser].id;
						var listRoleAssigned=[];
						var listRoleAndProgramsRules=syncAPI.getlmisUserRolesAndProgramRules();
						var listRoleFromMoodleUser=getListRolesFromMoodleUser(listUsersToCreateInLmis[indexUser].id,listUsersToCreateInLmis);
						for(var indexRule=0;indexRule<listRoleAndProgramsRules.length;indexRule++)
						{
							var oRoleProgramRule=listRoleAndProgramsRules[indexRule];
							if(listRoleFromMoodleUser.includes(oRoleProgramRule.role.trim().toLowerCase()))
							{
								var oRole=getRoleByName(oRoleProgramRule.role,_listRoles);
								var oRoleToAssign={roleId:oRole.id,warehouseId:homeFacilityId};
								listRoleAssigned.push(oRoleToAssign);
							}
						}//end for listRoleAndProgramsRules
						
						if(listUsersToCreateInLmis[indexUser].username!="")
						{
						var lmisUser={username:listUsersToCreateInLmis[indexUser].username,firstName:listUsersToCreateInLmis[indexUser].firstname,
							lastName:listUsersToCreateInLmis[indexUser].lastname,email:listUsersToCreateInLmis[indexUser].email,active:true,loginRestricted:true,
							homeFacilityId:homeFacilityId,
							roleAssignments:listRoleAssigned};
						listLmisUserToCreate.push(lmisUser);
						};
					
						
					}//end for listUsersToCreateInLmis
					
					console.log(JSON.stringify(listLmisUserToCreate));
					//Create now users from list
					console.log("***********Launch the user creation process************");
					
					syncAPI.getAccessToken(function(responseToken)
					{
						var token=responseToken.access_token;
						for(var indexUser=0;indexUser<listLmisUserToCreate.length;indexUser++)
						{
							console.log("create user :"+indexUser);
							var oUserToAdd=JSON.stringify(listLmisUserToCreate[indexUser]);
							//console.log(oUserToAdd);
							
							syncAPI.createLMISUser(oUserToAdd,token,function(createdUser)
							{
								//console.log(oUserToAdd);
								//console.log(createdUser.id);
								if(createdUser!=null && createdUser.id!=undefined)
								{
									//console.log("Enter detail post..");
									var userId=createdUser.id;
									var userContactDetails={referenceDataUserId:userId,phoneNumber:null,allowNotify:false,
										emailDetails:{email:JSON.parse(oUserToAdd).email,emailVerified:true}};
									//console.log(userContactDetails);
									syncAPI.updateUserContactDetails(userContactDetails,token,function(createdUserDetails)
									{
										//console.log(createdUserDetails);
										var randPart=Math.floor((Math.random() * 20000) + 10000);
										var password=JSON.parse(oUserToAdd).username+"!"+randPart;
										console.log("password: "+password);
										//Now create the authentication information
										var userAuth={id:userId,username:JSON.parse( oUserToAdd).username,password:password,enabled:true};
										//console.log(userAuth);
										syncAPI.createUserAuth(userAuth,token,function(createdAuth)
										{
											console.log(createdAuth);
											if(createdAuth.id!=undefined)
											{
												var serviceLeveltoken=responseToken.access_token;
												//if auth information is added then send the notification email
												var _subject="Your password from OpenLMIS training plateform";
												var _body="Dear "+JSON.parse(oUserToAdd).username+";";
												_body+="Your password to connect to openlmis for training is :"+password;
												var notificationObject={userId:userId,messages:{email:{subject:_subject,body:_body}}};
												var _destinationEmail=[JSON.parse(oUserToAdd).email];
												var emailSettings=syncAPI.getEmailSettings();
												SENDEMAIL.sendEmail(_subject,_body,_destinationEmail,emailSettings,(res)=>{
													console.log(res);
												});
												
												
												/*
												var _destinationEmail=[JSON.parse(oUserToAdd).email];
												var emailSettings=syncAPI.getEmailSettings();
												SENDEMAIL.sendEmail(_subject,_body,_destinationEmail,emailSettings,(res)=>{
													console.log(res);
												})*/
											}
										});
									});//end updateUserContactDetails
								}
							});//end createLMISUser
							
							console.log("---------------------------------------------------");
						}
					});//end getAccessToken
					
				}//end if nbrOfUserToAddInLMIS
				
			}
			
			
			res.end();
		});
	});
	/*
	app.get ("/route1", function (req,res,next)
	{
		req.session.apivalue="xxx123xx";
		res.send(req.session.apivalue);
	});
	app.get ("/route2", function (req,res,next)
	{
		console.log(req.session.apivalue);
	});
	* */
	app.get ("/deleteusers", function (req,res,next)
	{
		//console.log(req.session.apivalue);
		var token=req.query.token;
		console.log("token:"+token);
		
		syncAPI.getListUsers(token,function(listUsers)
		{
			console.log("TotalUser: "+listUsers.length);
			var listUserToDelete=listUsers.slice(20,500);
			for(var indexUser=0;indexUser<listUserToDelete.length;indexUser++)
			{
				var userId=listUserToDelete[indexUser].id;
				console.log(`Deleting user ${indexUser}/${listUserToDelete.length}`);
				syncAPI.deleteUSer(userId,token,function(response)
				{
					console.log("deleting :"+userId);
					console.log(response);
					res.send();
					
				});
			}
		});
	});
	app.get ("/getnbreusers", function (req,res,next)
	{
		syncAPI.getAccessToken(function(responseToken)
		{
			//console.log(responseToken.access_token);
			var token=responseToken.access_token;
			//req.session.token=token;
			//console.log("------"+req.session.token+"-------------");
			syncAPI.getListUsers(token,function(listUsers)
			{
				console.log("users :"+listUsers.length);
				res.send("users :"+listUsers.length);
			});
		});
	});
	app.get ("/sendnotification", function (req,res,next)
	{
		syncAPI.getServiceLevelToken(function(responseToken)
		{
			//console.log(responseToken.access_token);
			var token=responseToken.access_token;
			var notificationObject={userId:'ceb64ee8-1eb3-42d9-8dbd-69dd645896c5',messages:{email:{subject:'Test notification service',
				body:'notification service message'}}}
			syncAPI.sendNotification(notificationObject,token,function(resNotification)
			{
				console.log(resNotification);
				res.end();
			});
		});
	});
	app.get ("/sendemail", function (req,res,next)
	{
		var emailSettings=syncAPI.getEmailSettings();
		SENDEMAIL.sendEmail("test openlmis","Training on openlmis",['gerbis2000@yahoo.fr','gerbis2000@gmail.com'],emailSettings,()=>{
			console.log(true);
		})
	});
	
	
}).call(this);
